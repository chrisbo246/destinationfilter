{"version":3,"sources":["../../app/scripts/mapInputs.js"],"names":[],"mappings":"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","file":"mapInputs.js","sourcesContent":["\r\nvar mapInputsModule = (function () {\r\n    'use strict';   \r\n    \r\n    /** @private */\r\n    var inputs = {};\r\n\r\n\r\n\r\n    /**\r\n     * Create a new input using predefined settings\r\n     * @public\r\n     * @param {string} name - Predefined input (variable name)\r\n     * @returns {Object} OL3 layer\r\n     */\r\n    /*var create = function (name, selector, map) {\r\n\r\n        if (!inputs[name]) {\r\n            console.warn(name + ' input definition does not exists');\r\n            return;\r\n        }\r\n\r\n        var input = inputs[name](selector);\r\n\r\n        return input;\r\n\r\n    };*/\r\n\r\n\r\n    \r\n    /**\r\n     * Map zoom input\r\n     * @param {string} selector - Input ID or class\r\n     * @param {Object} map - OL3 map\r\n     */\r\n    inputs.zoom = function (selector, map) {        \r\n        var $input = $(selector);\r\n        if ($input) {\r\n            $input.val(map.getView().getZoom());\r\n            $input.on('input change', function () {\r\n                var val = $input.val();\r\n                if (val || val === 0) {\r\n                    map.getView().setZoom(val);\r\n                }\r\n            });\r\n            map.getView().on('change:resolution', function () {\r\n                $input.val(this.getZoom());\r\n            });\r\n        }\r\n    };\r\n    \r\n    \r\n    \r\n    /**\r\n     * Map resolution input\r\n     * @param {string} selector - Input ID or class\r\n     * @param {Object} map - OL3 map\r\n     */\r\n    inputs.resolution = function (selector, map) {\r\n        var $input = $(selector);\r\n        if ($input) {\r\n            $input.val(map.getView().getResolution());\r\n            $input.on('input change', function () {\r\n                var val = $input.val();\r\n                if (val || val === 0) {\r\n                    map.getView().setResolution(val);\r\n                }\r\n            });\r\n            map.getView().on('change:resolution', function () {\r\n                $input.val(this.getResolution());\r\n            });\r\n        }\r\n    };\r\n    \r\n    \r\n    \r\n    /**\r\n     * Map rotation input\r\n     * @param {string} selector - Input ID or class\r\n     * @param {Object} map - OL3 map\r\n     */\r\n    inputs.rotation = function (selector, map) {\r\n        var $input = $(selector);\r\n        if ($input) {\r\n            $input.val(map.getView().getRotation());\r\n            $input.on('input change', function () {\r\n                var val = $input.val();\r\n                if (val || val === 0) {\r\n                    map.getView().setRotation(val);\r\n                }\r\n            });\r\n            map.getView().on('change:rotation', function () {\r\n                $input.val(this.getRotation());\r\n            });\r\n        }\r\n    };\r\n\r\n    \r\n    \r\n    /**\r\n     * Map X center input\r\n     * @param {string} selector - Input ID or class\r\n     * @param {Object} map - OL3 map\r\n     */\r\n    inputs.centerX = function (selector, map) { \r\n        var $input = $(selector);\r\n        if ($input) {\r\n            var lonLat = map.getView().getCenter();\r\n            $input.val(lonLat[0]);\r\n            /*$input.on('input change', function () {\r\n                var val = $input.val();\r\n                if (val || val === 0) {\r\n                    // map.getView().setCenter($centerX.val(), $centerY.val());\r\n                }\r\n            });*/\r\n            map.getView().on('change:center', function () {\r\n                var lonLat = this.getCenter();\r\n                $input.val(lonLat[0]); // .toFixed(2)\r\n            });\r\n        }\r\n    };\r\n\r\n\r\n\r\n    /**\r\n     * Map Y center input\r\n     * @param {string} selector - Input ID or class\r\n     * @param {Object} map - OL3 map\r\n     */\r\n    inputs.centerY = function (selector, map) { \r\n        var $input = $(selector);\r\n        if ($input) {\r\n            var lonLat = map.getView().getCenter();\r\n            $input.val(lonLat[1]);\r\n            /*$input.on('input change', function () {\r\n                var val = $input.val();\r\n                if (val || val === 0) {\r\n                    //map.getView().setCenter($centerX.val(), val);\r\n                }\r\n            });*/\r\n            map.getView().on('change:center', function () {\r\n                var lonLat = this.getCenter();\r\n                $input.val(lonLat[1]); // .toFixed(2)\r\n            });\r\n        }\r\n    };\r\n\r\n\r\n    \r\n    /**\r\n     * Map XY center input\r\n     * @param {string} selector - Input ID or class\r\n     * @param {Object} map - OL3 map\r\n     */\r\n    inputs.center = function (Xselector, Yselector, map) {\r\n        inputs.centerX(Xselector, map);\r\n        inputs.centerY(Yselector, map);\r\n        var $centerX = $(Xselector);\r\n        var $centerY = $(Yselector);\r\n        if ($centerX && $centerY) {\r\n            $(Xselector + ', ' + Yselector).on('input change', function () {\r\n                var x = $centerX.val();\r\n                var y = $centerY.val();\r\n                if ((x || x === 0) && (y || y === 0)) {\r\n                    map.getView().setCenter(x, y);\r\n                }\r\n            });\r\n        }\r\n    };\r\n    \r\n    \r\n    \r\n    /**\r\n     * Export map as PNG\r\n     * @param {string} selector - Link ID or class\r\n     * @param {Object} map - OL3 map\r\n     */\r\n    inputs.exportPNG = function (selector, map) {  \r\n        var $input = $(selector);\r\n        if ($input) {\r\n            $input.on('click', function () {\r\n                map.once('postcompose', function (event) {\r\n                    var canvas = event.context.canvas;\r\n                    $input.attr('href', canvas.toDataURL('image/png'));\r\n                });\r\n                // map.renderSync();\r\n            });\r\n        }\r\n    };\r\n\r\n    \r\n    \r\n    return inputs;\r\n    \r\n})();"]}